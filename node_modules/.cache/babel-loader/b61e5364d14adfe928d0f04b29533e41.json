{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = require(\"./path\");\n\nvar t = require(\"@babel/types\");\n\nconst testing = process.env.NODE_ENV === \"test\";\n\nclass TraversalContext {\n  constructor(scope, opts, state, parentPath) {\n    this.queue = null;\n    this.priorityQueue = null;\n    this.parentPath = parentPath;\n    this.scope = scope;\n    this.state = state;\n    this.opts = opts;\n  }\n\n  shouldVisit(node) {\n    const opts = this.opts;\n    if (opts.enter || opts.exit) return true;\n    if (opts[node.type]) return true;\n    const keys = t.VISITOR_KEYS[node.type];\n    if (!(keys != null && keys.length)) return false;\n\n    for (const key of keys) {\n      if (node[key]) return true;\n    }\n\n    return false;\n  }\n\n  create(node, obj, key, listKey) {\n    return _path.default.get({\n      parentPath: this.parentPath,\n      parent: node,\n      container: obj,\n      key: key,\n      listKey\n    });\n  }\n\n  maybeQueue(path, notPriority) {\n    if (this.trap) {\n      throw new Error(\"Infinite cycle detected\");\n    }\n\n    if (this.queue) {\n      if (notPriority) {\n        this.queue.push(path);\n      } else {\n        this.priorityQueue.push(path);\n      }\n    }\n  }\n\n  visitMultiple(container, parent, listKey) {\n    if (container.length === 0) return false;\n    const queue = [];\n\n    for (let key = 0; key < container.length; key++) {\n      const node = container[key];\n\n      if (node && this.shouldVisit(node)) {\n        queue.push(this.create(parent, container, key, listKey));\n      }\n    }\n\n    return this.visitQueue(queue);\n  }\n\n  visitSingle(node, key) {\n    if (this.shouldVisit(node[key])) {\n      return this.visitQueue([this.create(node, node, key)]);\n    } else {\n      return false;\n    }\n  }\n\n  visitQueue(queue) {\n    this.queue = queue;\n    this.priorityQueue = [];\n    const visited = new WeakSet();\n    let stop = false;\n\n    for (const path of queue) {\n      path.resync();\n\n      if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {\n        path.pushContext(this);\n      }\n\n      if (path.key === null) continue;\n\n      if (testing && queue.length >= 10000) {\n        this.trap = true;\n      }\n\n      const {\n        node\n      } = path;\n      if (visited.has(node)) continue;\n      if (node) visited.add(node);\n\n      if (path.visit()) {\n        stop = true;\n        break;\n      }\n\n      if (this.priorityQueue.length) {\n        stop = this.visitQueue(this.priorityQueue);\n        this.priorityQueue = [];\n        this.queue = queue;\n        if (stop) break;\n      }\n    }\n\n    for (const path of queue) {\n      path.popContext();\n    }\n\n    this.queue = null;\n    return stop;\n  }\n\n  visit(node, key) {\n    const nodes = node[key];\n    if (!nodes) return false;\n\n    if (Array.isArray(nodes)) {\n      return this.visitMultiple(nodes, node, key);\n    } else {\n      return this.visitSingle(node, key);\n    }\n  }\n\n}\n\nexports.default = TraversalContext;","map":{"version":3,"sources":["/Users/hackinghunter/Desktop/React js/my website/sunny/node_modules/@babel/traverse/lib/context.js"],"names":["Object","defineProperty","exports","value","default","_path","require","t","testing","process","env","NODE_ENV","TraversalContext","constructor","scope","opts","state","parentPath","queue","priorityQueue","shouldVisit","node","enter","exit","type","keys","VISITOR_KEYS","length","key","create","obj","listKey","get","parent","container","maybeQueue","path","notPriority","trap","Error","push","visitMultiple","visitQueue","visitSingle","visited","WeakSet","stop","resync","contexts","pushContext","has","add","visit","popContext","nodes","Array","isArray"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = require(\"./path\");\n\nvar t = require(\"@babel/types\");\n\nconst testing = process.env.NODE_ENV === \"test\";\n\nclass TraversalContext {\n  constructor(scope, opts, state, parentPath) {\n    this.queue = null;\n    this.priorityQueue = null;\n    this.parentPath = parentPath;\n    this.scope = scope;\n    this.state = state;\n    this.opts = opts;\n  }\n\n  shouldVisit(node) {\n    const opts = this.opts;\n    if (opts.enter || opts.exit) return true;\n    if (opts[node.type]) return true;\n    const keys = t.VISITOR_KEYS[node.type];\n    if (!(keys != null && keys.length)) return false;\n\n    for (const key of keys) {\n      if (node[key]) return true;\n    }\n\n    return false;\n  }\n\n  create(node, obj, key, listKey) {\n    return _path.default.get({\n      parentPath: this.parentPath,\n      parent: node,\n      container: obj,\n      key: key,\n      listKey\n    });\n  }\n\n  maybeQueue(path, notPriority) {\n    if (this.trap) {\n      throw new Error(\"Infinite cycle detected\");\n    }\n\n    if (this.queue) {\n      if (notPriority) {\n        this.queue.push(path);\n      } else {\n        this.priorityQueue.push(path);\n      }\n    }\n  }\n\n  visitMultiple(container, parent, listKey) {\n    if (container.length === 0) return false;\n    const queue = [];\n\n    for (let key = 0; key < container.length; key++) {\n      const node = container[key];\n\n      if (node && this.shouldVisit(node)) {\n        queue.push(this.create(parent, container, key, listKey));\n      }\n    }\n\n    return this.visitQueue(queue);\n  }\n\n  visitSingle(node, key) {\n    if (this.shouldVisit(node[key])) {\n      return this.visitQueue([this.create(node, node, key)]);\n    } else {\n      return false;\n    }\n  }\n\n  visitQueue(queue) {\n    this.queue = queue;\n    this.priorityQueue = [];\n    const visited = new WeakSet();\n    let stop = false;\n\n    for (const path of queue) {\n      path.resync();\n\n      if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {\n        path.pushContext(this);\n      }\n\n      if (path.key === null) continue;\n\n      if (testing && queue.length >= 10000) {\n        this.trap = true;\n      }\n\n      const {\n        node\n      } = path;\n      if (visited.has(node)) continue;\n      if (node) visited.add(node);\n\n      if (path.visit()) {\n        stop = true;\n        break;\n      }\n\n      if (this.priorityQueue.length) {\n        stop = this.visitQueue(this.priorityQueue);\n        this.priorityQueue = [];\n        this.queue = queue;\n        if (stop) break;\n      }\n    }\n\n    for (const path of queue) {\n      path.popContext();\n    }\n\n    this.queue = null;\n    return stop;\n  }\n\n  visit(node, key) {\n    const nodes = node[key];\n    if (!nodes) return false;\n\n    if (Array.isArray(nodes)) {\n      return this.visitMultiple(nodes, node, key);\n    } else {\n      return this.visitSingle(node, key);\n    }\n  }\n\n}\n\nexports.default = TraversalContext;"]},"metadata":{},"sourceType":"script"}