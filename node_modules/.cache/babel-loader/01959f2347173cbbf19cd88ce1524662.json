{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n};\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes$1.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types$1.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types$1._function && prevType !== types$1._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n};\n\ntypes$1.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.state.context.push(statementParens ? types.parenStatement : types.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function () {};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types$1.semi && prevType !== types$1._else && !(prevType === types$1._return && this.hasPrecedingLineBreak()) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes$1.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes$1.braceHashL.updateContext = function () {\n  this.state.context.push(types.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inStaticBlock() {\n    return (this.currentThisScope().flags & SCOPE_STATIC_BLOCK) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = [];\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.includes(name) && (scope.lexical.includes(name) || scope.functions.includes(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].declareFunctions.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(types$1.string);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      if (firstIdentIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n      }\n\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\" && (_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) {\n          abort();\n        }\n\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral(this.match(types$1._true));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  updateContext(prevType) {\n    if (this.match(types$1.name) && this.state.value === \"of\" && prevType === types$1.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n      this.state.exprAllowed = false;\n    } else {\n      super.updateContext(prevType);\n    }\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\", false);\ntypes.j_cTag = new TokContext(\"</tag\", false);\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = function () {\n  this.state.context.push(types.j_expr);\n  this.state.context.push(types.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes$1.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types$1.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types.j_oTag) {\n        this.state.context.push(types.braceExpression);\n      } else if (curContext === types.j_expr) {\n        this.state.context.push(types.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types$1.slash) && prevType === types$1.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = false;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n};\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      exprAllowed: state.exprAllowed,\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types$1.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types$1.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types$1.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types$1.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.codePointAtPos(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types.functionExpression || parent === types.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types$1.colon && (parent === types.braceStatement || parent === types.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types$1._return || prevType === types$1.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {\n      return true;\n    }\n\n    if (prevType === types$1.braceL) {\n      return parent === types.braceStatement;\n    }\n\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {\n      return false;\n    }\n\n    if (prevType === types$1.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.state.exportedIdentifiers;\n    this.state.exportedIdentifiers = [];\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.state.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n      return this.parseModuleExpression();\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types$1.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(id);\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              return this.parseDo(true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(false);\n        }\n\n      case types$1.regexp:\n        {\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case types$1.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case types$1.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case types$1._null:\n        return this.parseNullLiteral();\n\n      case types$1._true:\n        return this.parseBooleanLiteral(true);\n\n      case types$1._false:\n        return this.parseBooleanLiteral(false);\n\n      case types$1.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const start = this.state.start;\n          const value = this.state.value;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(value, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, value);\n          } else {\n            throw this.unexpected(start);\n          }\n\n          return node;\n        }\n\n      case types$1.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    const node = this.startNode();\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types$1._class || type === types$1._function) && (curContext === types.functionStatement || curContext === types.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types$1.semi) || !this.match(types$1.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types$1.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      const matched = keywordRelationalOperator.exec(this.input);\n\n      if (matched !== null) {\n        const endCh = this.codePointAtPos(next + matched[0].length);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types$1.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(types$1.string);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;","map":{"version":3,"sources":["/Users/hackinghunter/Desktop/React js/my website/sunny/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","name","options","token","set","createBinop","types$1","num","bigint","decimal","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","keys","forEach","reasonCode","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","params","raiseWithData","raiseOverwrite","message","replace","_","errorRecovery","errors","error","_raise","data","errorTemplate","errorContext","err","isLookahead","estree","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","String","parseDecimalLiteral","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseMaybePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","toAssignable","isLHS","toAssignableObjectExpressionProp","key","finishCallExpression","optional","callee","_node$arguments$","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","isExpr","preserveSpace","types","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","indexOf","checkLocalExport","FlowScope","declareFunctions","FlowScopeHandler","includes","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","getScopeHandler","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloPos","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","canInsertSemicolon","elementType","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","checkParams","parse","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","readWord1","fullWord","getTokenFromCode","charCodeAt","finishOp","isBinding","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","maybeInArrowParameters","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","add","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","State","curLine","potentialArrowAt","inPipeline","inPropertyName","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","containsEsc","strictErrors","exportedIdentifiers","tokensLength","strictMode","sourceType","startLine","curPosition","skipArrays","Array","isArray","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","createLookaheadState","lookaheadState","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","typescript","tsIsIdentifier","tsTokenCanFollowModifier","isLiteralPropertyName","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","isLineTerminator","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","prodParam","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","hasFollowingLineBreak","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","parseStatementContent","tsHasSomeModifiers","modifiers","some","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","override","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","placeholder","PlaceHolderErrors","ClassNameIsRequired","placeholders","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","identifier","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","p","join","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","ranges","tokens","createParenthesizedExpressions","getOptions","opts","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","skip","codePointAtPos","cp","trail","setStrict","clear","skipSpace","readTmplToken","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","readWord","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","parent","update","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","from","declarePrivateName","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","UtilParser","op","nameStart","nameEnd","nextCh","allowAsi","messageOrType","missingPlugin","expectOnePlugin","names","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","initializeScopes","oldLabels","oldExportedIdentifiers","oldInModule","oldScope","oldProdParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","_node$extra3","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","elem","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","parseModuleExpression","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parsePrivateName","parseNoCallExpr","tag","quasi","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","lookaheadCh","codePointAt","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","matched","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importedIsString","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        const firstTrailingCommentIndex = trailingComments.findIndex(comment => comment.end >= node.end);\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(0, firstTrailingCommentIndex);\n          node.trailingComments = trailingComments.slice(firstTrailingCommentIndex);\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace) {\n    this.token = void 0;\n    this.isExpr = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\nconst types = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes$1.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types$1.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed && prevType !== types$1._function && prevType !== types$1._class) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n};\n\ntypes$1.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.state.context.push(statementParens ? types.parenStatement : types.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function () {};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types$1.semi && prevType !== types$1._else && !(prevType === types$1._return && this.hasPrecedingLineBreak()) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes$1.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes$1.braceHashL.updateContext = function () {\n  this.state.context.push(types.recordExpression);\n  this.state.exprAllowed = true;\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.flags = void 0;\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n\n  get inStaticBlock() {\n    return (this.currentThisScope().flags & SCOPE_STATIC_BLOCK) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = [];\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.includes(name) && (scope.lexical.includes(name) || scope.functions.includes(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].declareFunctions.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(types$1.string);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      if (firstIdentIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n      }\n\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n\n        if (arrowExpression.type !== \"ArrowFunctionExpression\" && (_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) {\n          abort();\n        }\n\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral(this.match(types$1._true));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  updateContext(prevType) {\n    if (this.match(types$1.name) && this.state.value === \"of\" && prevType === types$1.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === \"interface\") {\n      this.state.exprAllowed = false;\n    } else {\n      super.updateContext(prevType);\n    }\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.exportedIdentifiers = [];\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\", false);\ntypes.j_cTag = new TokContext(\"</tag\", false);\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = function () {\n  this.state.context.push(types.j_expr);\n  this.state.context.push(types.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes$1.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types$1.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types.j_oTag) {\n        this.state.context.push(types.braceExpression);\n      } else if (curContext === types.j_expr) {\n        this.state.context.push(types.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types$1.slash) && prevType === types$1.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers !== undefined) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      if (allowModifiers === false && (accessibility || readonly)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = false;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow() {\n    return this.match(types$1.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n});\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      exprAllowed: state.exprAllowed,\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n\n      this.state.pos += 2;\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types$1.braceBarR, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.finishOp(types$1.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types$1.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.finishToken(types$1.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.codePointAtPos(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types.functionExpression || parent === types.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types$1.colon && (parent === types.braceStatement || parent === types.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types$1._return || prevType === types$1.name && this.state.exprAllowed) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {\n      return true;\n    }\n\n    if (prevType === types$1.braceL) {\n      return parent === types.braceStatement;\n    }\n\n    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {\n      return false;\n    }\n\n    if (prevType === types$1.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.end, this.nextTokenStart()));\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto\n    } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.state.exportedIdentifiers;\n    this.state.exportedIdentifiers = [];\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.state.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = void 0;\n    this.start = void 0;\n    this.end = void 0;\n    this.loc = void 0;\n    this.range = void 0;\n    this.leadingComments = void 0;\n    this.trailingComments = void 0;\n    this.innerComments = void 0;\n    this.extra = void 0;\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    let paramFlags = PARAM;\n\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos));\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n      return this.parseModuleExpression();\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, this.hasPlugin(\"topLevelAwait\") ? ErrorMessages.AwaitNotInAsyncContext : ErrorMessages.AwaitNotInAsyncFunction);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? new ExpressionErrors() : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.state.type === types$1.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              const last = this.state.context.length - 1;\n\n              if (this.state.context[last] !== types.functionStatement) {\n                throw new Error(\"Internal error\");\n              }\n\n              this.state.context[last] = types.functionExpression;\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(id);\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              return this.parseDo(true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(false);\n        }\n\n      case types$1.regexp:\n        {\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case types$1.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case types$1.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case types$1._null:\n        return this.parseNullLiteral();\n\n      case types$1._true:\n        return this.parseBooleanLiteral(true);\n\n      case types$1._false:\n        return this.parseBooleanLiteral(false);\n\n      case types$1.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const start = this.state.start;\n          const value = this.state.value;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(value, node.start);\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, value);\n          } else {\n            throw this.unexpected(start);\n          }\n\n          return node;\n        }\n\n      case types$1.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, ErrorMessages.PrimaryTopicRequiresSmartPipeline);\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, ErrorMessages.PrimaryTopicNotAllowed);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(id) {\n    const node = this.startNodeAtNode(id);\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    const node = this.startNode();\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.state.exprAllowed = false;\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n      const curContext = this.curContext();\n\n      if ((type === types$1._class || type === types$1._function) && (curContext === types.functionStatement || curContext === types.functionExpression)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    }\n\n    if (this.scope.inClass && !this.scope.inNonArrowFunction && word === \"arguments\") {\n      this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n\n    if (this.match(types$1.semi) || !this.match(types$1.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types$1.star);\n      node.argument = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, ErrorMessages.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n\n      bodyNode.expression = childExpression;\n    }\n\n    return this.finishNode(bodyNode, isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\");\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      const matched = keywordRelationalOperator.exec(this.input);\n\n      if (matched !== null) {\n        const endCh = this.codePointAtPos(next + matched[0].length);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types$1.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (keyName !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, keyName);\n      }\n\n      if (attrNames.has(keyName)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(types$1.string);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}